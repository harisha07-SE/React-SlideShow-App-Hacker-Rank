{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/Slides.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Slides","slides","currentSlide","previous","next","restart","className","onClick","disabled","data-testid","length","title","text","App","useState","count","setCount","header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","applyPolyfills","defineCustomElements"],"mappings":"sKAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,uFCeFgB,G,YArCA,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACtD,OACE,6BACE,yBAAKV,GAAG,aAAaW,UAAU,eAC7B,4BACEC,QAASF,EACTG,SAA2B,IAAjBN,EACVO,cAAY,iBACZH,UAAU,kBAJZ,WAQA,4BACEC,QAASJ,EACTK,SAA2B,IAAjBN,EACVO,cAAY,cACZH,UAAU,SAJZ,QAQA,4BACEC,QAASH,EACTI,SAAUN,IAAiBD,EAAOS,OAClCD,cAAY,cACZH,UAAU,SAJZ,SASF,yBAAKX,GAAG,QAAQW,UAAU,oBACxB,wBAAIG,cAAY,SAASR,EAAOC,IAAiBD,EAAOC,GAAcS,OACtE,uBAAGF,cAAY,QAAQR,EAAOC,IAAiBD,EAAOC,GAAcU,UCX7DC,MAhBf,YAA0B,IAAXZ,EAAU,EAAVA,OAAU,EACGa,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,KAEvB,OACE,6BACE,gCAAYC,OANJ,kBAOR,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQL,OAAQA,EACdC,aAAca,EACdX,KAAM,kBAAMY,EAASD,EAAO,IAC5BZ,SAAU,kBAAMa,EAASD,EAAO,IAChCV,QAAS,kBAAMW,EAAS,SCNdE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCcNC,IAASC,OAAO,kBAAC,EAAD,CAAKvB,OAvBN,CACb,CACEU,MAAO,uBACPC,KAAM,2CAER,CACED,MAAO,qBACPC,KAAM,gEAER,CACED,MAAO,kBACPC,KAAM,8DAER,CACED,MAAO,sBACPC,KAAM,kEAER,CACED,MAAO,aACPC,KAAM,0DAI+Ba,SAASC,eAAe,SAGjEC,cAAiBrC,MAAK,WACpBsC,YAAqBT,a","file":"static/js/main.e4a70eba.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t18,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 13;\nmodule.exports = webpackAsyncContext;","import React from \"react\";\n\nconst Slides = ({ slides, currentSlide, previous, next, restart }) => {\n  return (\n    <div>\n      <div id=\"navigation\" className=\"text-center\">\n        <button\n          onClick={restart}\n          disabled={currentSlide === 0}\n          data-testid=\"button-restart\"\n          className=\"small outlined\"\n        >\n          Restart\n        </button>\n        <button\n          onClick={previous}\n          disabled={currentSlide === 0}\n          data-testid=\"button-prev\"\n          className=\"small\"\n        >\n          Prev\n        </button>\n        <button\n          onClick={next}\n          disabled={currentSlide === slides.length}\n          data-testid=\"button-next\"\n          className=\"small\"\n        >\n          Next\n        </button>\n      </div>\n      <div id=\"slide\" className=\"card text-center\">\n        <h1 data-testid=\"title\">{slides[currentSlide] && slides[currentSlide].title}</h1>\n        <p data-testid=\"text\">{slides[currentSlide] && slides[currentSlide].text}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Slides;\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport \"h8k-components\";\nimport Slides from \"./components/Slides\";\nconst title = \"Slideshow App\";\n\nfunction App({ slides }) {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <h8k-navbar header={title}></h8k-navbar>\n      <div className=\"App\">\n        <Slides slides={slides}\n          currentSlide={count}\n          next={() => setCount(count +1)}\n          previous={() => setCount(count -1)}\n          restart={() => setCount(0)} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { applyPolyfills, defineCustomElements } from \"h8k-components/loader\";\n\nconst SLIDES = [\n  {\n    title: \"Today's workout plan\",\n    text: \"We're gonna do 3 fundamental exercises.\",\n  },\n  {\n    title: \"First, 10 push-ups\",\n    text: \"Do 10 reps. Remember about full range of motion. Don't rush.\",\n  },\n  {\n    title: \"Next, 20 squats\",\n    text: \"Squats are important. Remember to keep your back straight.\",\n  },\n  {\n    title: \"Finally, 15 sit-ups\",\n    text: \"Slightly bend your knees. Remember about full range of motion.\",\n  },\n  {\n    title: \"Great job!\",\n    text: \"You made it, have a nice day and see you next time!\",\n  },\n];\n\nReactDOM.render(<App slides={SLIDES} />, document.getElementById(\"root\"));\n//registerServiceWorker();\n\napplyPolyfills().then(() => {\n  defineCustomElements(window);\n});\n"],"sourceRoot":""}